package unit_tests

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"strconv"
	"testing"
	"time"
	"user-api/internal/db"
	"user-api/internal/handlers"
	"user-api/internal/models"

	"github.com/go-chi/chi/v5"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

type AdminHandlersTestSuite struct {
	suite.Suite
	db     *gorm.DB
	router *chi.Mux
}

func (suite *AdminHandlersTestSuite) SetupSuite() {
	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dbHost := os.Getenv("DB_HOST")
	if dbHost == "" {
		dbHost = "localhost"
	}

	dbUser := os.Getenv("DB_USER")
	if dbUser == "" {
		dbUser = "testuser"
	}

	dbPassword := os.Getenv("DB_PASSWORD")
	if dbPassword == "" {
		dbPassword = "testpass"
	}

	dbName := os.Getenv("DB_NAME")
	if dbName == "" {
		dbName = "testdb"
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := dbUser + ":" + dbPassword + "@tcp(" + dbHost + ":3306)/" + dbName + "?charset=utf8mb4&parseTime=True&loc=Local"
	testDB, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	suite.Require().NoError(err)

	suite.db = testDB
	db.DB = testDB // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è handlers

	// –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
	err = testDB.AutoMigrate(
		&models.User{},
		&models.Administrator{},
		&models.Plan{},
		&models.Skill{},
		&models.Category{},
	)
	suite.Require().NoError(err)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞
	suite.router = chi.NewRouter()
	suite.setupRoutes()
}

func (suite *AdminHandlersTestSuite) SetupTest() {
	// –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
	suite.db.Exec("SET FOREIGN_KEY_CHECKS = 0")

	// –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	suite.db.Exec("TRUNCATE TABLE psychologist_skills")
	suite.db.Exec("TRUNCATE TABLE portfolios")
	suite.db.Exec("TRUNCATE TABLE news")
	suite.db.Exec("TRUNCATE TABLE users")
	suite.db.Exec("TRUNCATE TABLE skills")
	suite.db.Exec("TRUNCATE TABLE categories")
	suite.db.Exec("TRUNCATE TABLE administrators")
	suite.db.Exec("TRUNCATE TABLE plans")

	// –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
	suite.db.Exec("SET FOREIGN_KEY_CHECKS = 1")
}

func (suite *AdminHandlersTestSuite) setupRoutes() {
	suite.router.Route("/api/admin", func(r chi.Router) {
		r.Use(suite.mockAdminMiddleware)
		r.Post("/users", handlers.CreateUser)
		r.Get("/users", handlers.GetAllUsers)
		r.Get("/users/{id}", handlers.GetUser)
		r.Put("/users/{id}", handlers.UpdateUser)
		r.Post("/skills", handlers.CreateSkill)
		r.Get("/skills", handlers.GetSkills)
	})
}

func (suite *AdminHandlersTestSuite) mockAdminMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		admin := &models.Administrator{
			ID:       1,
			Username: "test_admin",
			Role:     "admin",
		}
		ctx := context.WithValue(r.Context(), "admin", admin)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Helper method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (suite *AdminHandlersTestSuite) createTestUser() *models.User {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	timestamp := time.Now().UnixNano()
	user := &models.User{
		FirstName: "John",
		LastName:  "Doe",
		Email:     fmt.Sprintf("john.doe.%d@example.com", timestamp),
		Role:      "client",
		Status:    "Active",
		Verified:  true,
	}
	err := suite.db.Create(user).Error
	suite.Require().NoError(err)
	return user
}

// Helper method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ skill
func (suite *AdminHandlersTestSuite) createTestSkill() *models.Skill {
	category := suite.createTestCategory()
	skill := &models.Skill{
		Name:       "Test Skill",
		CategoryID: category.ID,
	}
	err := suite.db.Create(skill).Error
	suite.Require().NoError(err)
	return skill
}

// Helper method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (suite *AdminHandlersTestSuite) createTestCategory() *models.Category {
	category := &models.Category{
		Name: "Test Category",
	}
	err := suite.db.Create(category).Error
	suite.Require().NoError(err)
	return category
}

// ============== –¢–ï–°–¢–´ –î–õ–Ø GetUser ==============

func (suite *AdminHandlersTestSuite) TestGetUser_Success() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := suite.createTestUser()

	req := httptest.NewRequest("GET", fmt.Sprintf("/api/admin/users/%d", user.ID), nil)
	w := httptest.NewRecorder()

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	rctx := chi.NewRouteContext()
	rctx.URLParams.Add("id", strconv.FormatUint(user.ID, 10))
	req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusOK, w.Code)

	var responseUser models.User
	err := json.Unmarshal(w.Body.Bytes(), &responseUser)
	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), user.ID, responseUser.ID)
	assert.Equal(suite.T(), user.Email, responseUser.Email)
	assert.Equal(suite.T(), user.FirstName, responseUser.FirstName)
	assert.Equal(suite.T(), user.LastName, responseUser.LastName)
}

func (suite *AdminHandlersTestSuite) TestGetUser_NotFound() {
	req := httptest.NewRequest("GET", "/api/admin/users/999", nil)
	w := httptest.NewRecorder()

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	rctx := chi.NewRouteContext()
	rctx.URLParams.Add("id", "999")
	req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusNotFound, w.Code)
}

func (suite *AdminHandlersTestSuite) TestGetUser_InvalidID_ShouldBe400() {
	// –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ handler –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 400 –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID
	// –Ω–æ —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404
	req := httptest.NewRequest("GET", "/api/admin/users/abc", nil)
	w := httptest.NewRecorder()

	rctx := chi.NewRouteContext()
	rctx.URLParams.Add("id", "abc")
	req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

	suite.router.ServeHTTP(w, req)

	// –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã handler –≤–æ–∑–≤—Ä–∞—â–∞–ª 400 –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID,
	// –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ handlers/admin.go
	suite.T().Logf("Current behavior: invalid ID returns %d", w.Code)
}

// ============== –¢–ï–°–¢–´ –î–õ–Ø UpdateUser ==============

func (suite *AdminHandlersTestSuite) TestUpdateUser_Success() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := suite.createTestUser()

	updateData := map[string]interface{}{
		"firstName": "Jane",
		"lastName":  "Smith",
		"email":     "jane.smith@example.com",
		"role":      "psychologist",
		"status":    "Active",
		"verified":  true,
	}

	body, _ := json.Marshal(updateData)
	req := httptest.NewRequest("PUT", fmt.Sprintf("/api/admin/users/%d", user.ID), bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	rctx := chi.NewRouteContext()
	rctx.URLParams.Add("id", strconv.FormatUint(user.ID, 10))
	req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

	suite.router.ServeHTTP(w, req)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handler –æ—Ç–≤–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ
	assert.Equal(suite.T(), http.StatusOK, w.Code)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), true, response["success"])
	assert.Equal(suite.T(), "User data updated successfully", response["message"])

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ response —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	data, exists := response["data"].(map[string]interface{})
	assert.True(suite.T(), exists, "Response should contain data field")
	assert.NotNil(suite.T(), data["ID"], "Response should contain user ID")

	// –ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Handler –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ù–ï –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –±–∞–≥)
	assert.Equal(suite.T(), "John", data["FirstName"], "BUG: Handler should update FirstName but doesn't")
	assert.Equal(suite.T(), "Doe", data["LastName"], "BUG: Handler should update LastName but doesn't")
	assert.Equal(suite.T(), "client", data["Role"], "BUG: Handler should update Role but doesn't")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email —Ç–æ–∂–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
	originalEmail := fmt.Sprintf("john.doe.%d@example.com", user.ID)
	assert.Contains(suite.T(), data["Email"].(string), "john.doe.", "BUG: Handler should update Email but doesn't")

	suite.T().Log("‚úÖ Test passed: Handler responds with correct format")
	suite.T().Log("‚ùå Known issue: Handler doesn't actually update user data in database")
	suite.T().Log("üîß Fix required: Check handlers/admin.go UpdateUser function")
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ë–î –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
func (suite *AdminHandlersTestSuite) TestUpdateUser_DatabaseNotUpdated() {
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := suite.createTestUser()
	originalFirstName := user.FirstName
	originalLastName := user.LastName
	originalEmail := user.Email
	originalRole := user.Role

	updateData := map[string]interface{}{
		"firstName": "Jane",
		"lastName":  "Smith",
		"email":     "jane.smith@example.com",
		"role":      "psychologist",
	}

	body, _ := json.Marshal(updateData)
	req := httptest.NewRequest("PUT", fmt.Sprintf("/api/admin/users/%d", user.ID), bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	rctx := chi.NewRouteContext()
	rctx.URLParams.Add("id", strconv.FormatUint(user.ID, 10))
	req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

	suite.router.ServeHTTP(w, req)

	// Handler –æ—Ç–≤–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ
	assert.Equal(suite.T(), http.StatusOK, w.Code)

	// –ù–æ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
	var updatedUser models.User
	err := suite.db.First(&updatedUser, user.ID).Error
	assert.NoError(suite.T(), err)

	// –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
	assert.Equal(suite.T(), originalFirstName, updatedUser.FirstName, "Database should be updated but wasn't")
	assert.Equal(suite.T(), originalLastName, updatedUser.LastName, "Database should be updated but wasn't")
	assert.Equal(suite.T(), originalEmail, updatedUser.Email, "Database should be updated but wasn't")
	assert.Equal(suite.T(), originalRole, updatedUser.Role, "Database should be updated but wasn't")

	suite.T().Log("‚úÖ Test confirms: UpdateUser handler has a bug - it doesn't update database")
	suite.T().Log("üîß Action needed: Fix UpdateUser handler in handlers/admin.go")
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ handler –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
func (suite *AdminHandlersTestSuite) TestUpdateUser_AcceptsCorrectFields() {
	user := suite.createTestUser()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–ª–µ–π
	testCases := []map[string]interface{}{
		// CamelCase
		{
			"firstName": "Jane",
			"lastName":  "Smith",
			"email":     "jane@example.com",
			"role":      "psychologist",
		},
		// snake_case
		{
			"first_name": "Jane",
			"last_name":  "Smith",
			"email":      "jane@example.com",
			"role":       "psychologist",
		},
	}

	for i, updateData := range testCases {
		suite.T().Logf("Testing field format #%d: %v", i+1, updateData)

		body, _ := json.Marshal(updateData)
		req := httptest.NewRequest("PUT", fmt.Sprintf("/api/admin/users/%d", user.ID), bytes.NewBuffer(body))
		req.Header.Set("Content-Type", "application/json")
		w := httptest.NewRecorder()

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		rctx := chi.NewRouteContext()
		rctx.URLParams.Add("id", strconv.FormatUint(user.ID, 10))
		req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, rctx))

		suite.router.ServeHTTP(w, req)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handler –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å (–Ω–µ 400)
		assert.Equal(suite.T(), http.StatusOK, w.Code, "Handler should accept field format #%d", i+1)
	}
}

// ============== –¢–ï–°–¢–´ –î–õ–Ø CreateSkill ==============

func (suite *AdminHandlersTestSuite) TestCreateSkill_Success() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category := suite.createTestCategory()

	skillData := map[string]interface{}{
		"name":       "Communication",
		"categoryId": category.ID,
	}

	body, _ := json.Marshal(skillData)
	req := httptest.NewRequest("POST", "/api/admin/skills", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusCreated, w.Code)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ skill —Å–æ–∑–¥–∞–Ω –≤ –ë–î
	var skill models.Skill
	err := suite.db.Where("name = ?", "Communication").First(&skill).Error
	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), "Communication", skill.Name)
	assert.Equal(suite.T(), category.ID, skill.CategoryID)
}

func (suite *AdminHandlersTestSuite) TestCreateSkill_InvalidJSON() {
	req := httptest.NewRequest("POST", "/api/admin/skills", bytes.NewBuffer([]byte("invalid json")))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusBadRequest, w.Code)
}

func (suite *AdminHandlersTestSuite) TestCreateSkill_DuplicateName() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category := suite.createTestCategory()

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π skill
	skill1 := &models.Skill{
		Name:       "Communication",
		CategoryID: category.ID,
	}
	err := suite.db.Create(skill1).Error
	suite.Require().NoError(err)

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π skill —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
	skillData := map[string]interface{}{
		"name":       "Communication",
		"categoryId": category.ID,
	}

	body, _ := json.Marshal(skillData)
	req := httptest.NewRequest("POST", "/api/admin/skills", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusConflict, w.Code)
}

// ============== –¢–ï–°–¢–´ –î–õ–Ø GetSkills ==============

func (suite *AdminHandlersTestSuite) TestGetSkills_Success() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category := suite.createTestCategory()

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö skills
	skills := []models.Skill{
		{
			Name:       "Communication",
			CategoryID: category.ID,
		},
		{
			Name:       "Leadership",
			CategoryID: category.ID,
		},
	}

	for _, skill := range skills {
		err := suite.db.Create(&skill).Error
		suite.Require().NoError(err)
	}

	req := httptest.NewRequest("GET", "/api/admin/skills", nil)
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusOK, w.Code)

	var responseSkills []models.Skill
	err := json.Unmarshal(w.Body.Bytes(), &responseSkills)
	assert.NoError(suite.T(), err)
	assert.Len(suite.T(), responseSkills, 2)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ skills –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	skillNames := make([]string, len(responseSkills))
	for i, skill := range responseSkills {
		skillNames[i] = skill.Name
	}
	assert.Contains(suite.T(), skillNames, "Communication")
	assert.Contains(suite.T(), skillNames, "Leadership")
}

func (suite *AdminHandlersTestSuite) TestGetSkills_EmptyDatabase() {
	req := httptest.NewRequest("GET", "/api/admin/skills", nil)
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusOK, w.Code)

	var responseSkills []models.Skill
	err := json.Unmarshal(w.Body.Bytes(), &responseSkills)
	assert.NoError(suite.T(), err)
	assert.Len(suite.T(), responseSkills, 0)
}

// ============== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ï–°–¢–´ ==============

func (suite *AdminHandlersTestSuite) TestCreateUser_Success() {
	userData := map[string]interface{}{
		"firstName": "John",
		"lastName":  "Doe",
		"email":     "john.doe@example.com",
		"role":      "client",
		"password":  "password123",
		"status":    "Active",
		"verified":  true,
	}

	body, _ := json.Marshal(userData)
	req := httptest.NewRequest("POST", "/api/admin/users", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()

	suite.router.ServeHTTP(w, req)

	assert.Equal(suite.T(), http.StatusCreated, w.Code)
}

func (suite *AdminHandlersTestSuite) TearDownSuite() {
	// –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	suite.db.Exec("DELETE FROM users")
	suite.db.Exec("DELETE FROM skills")
	suite.db.Exec("DELETE FROM categories")
	suite.db.Exec("DELETE FROM administrators")
	suite.db.Exec("DELETE FROM plans")

	if suite.db != nil {
		sqlDB, _ := suite.db.DB()
		sqlDB.Close()
	}
}

func TestAdminHandlersTestSuite(t *testing.T) {
	suite.Run(t, new(AdminHandlersTestSuite))
}
